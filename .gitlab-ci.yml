variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CLIENT_TIMEOUT: 600
  COMPOSE_HTTP_TIMEOUT: 600    
  COMPOSE_DOCKER_CLI_BUILD: 0    
  LOCALHOST_SONAR_IP: http://10.44.0.11:9000
  APP_IP: http://10.44.0.11:5000
  IMAGE_NAME: todo_app_img

stages:
  - test
  - scan_sast
  - sast
  - scan_dast
  - deploy 

test_job:
  stage: test
  image: python:3.9  
  script:
    - echo "Testing the app"
    - pip install pytest pytest-cov  
    - pip install -r requirements.txt
    - mkdir -p coverage  
    - export SQLALCHEMY_DATABASE_URI=sqlite:///site.db
    - export SECRET_KEY=$SECRET_KEY
    - pytest --cov=. --cov-report=term --cov-report=xml:coverage/coverage.xml  
    - pwd
    - ls -la coverage  
    - cat coverage/coverage.xml 
  artifacts:
    paths:
      - coverage/coverage.xml

owasp_dependency_check:
   stage: scan_sast
   image:
    name: owasp/dependency-check
    entrypoint: [""]
   script:
      - echo "Iniciando análise de dependência"
      - /usr/share/dependency-check/bin/dependency-check.sh  --nvdApiKey 8151ad02-01a3-4fa4-af7d-a495f225d998 --project "Task"  --scan . --format "HTML" --out dependency-check-report.html
   artifacts:
    paths:
      - dependency-check-report.html

bandit-sast:
  stage: scan_sast
  image: python:3.9
  script:
    - pip install bandit
    - bandit --version
    - bandit -r . --format json --output result-bandit.json
  allow_failure: true
  artifacts:
    paths:
      - result-bandit.json

sonar_code_analysis:
  stage: sast
  image: sonarsource/sonar-scanner-cli:latest
  script:
   - sonar-scanner -Dsonar.projectKey=Task-Manager-using-Flask -Dsonar.sources=. -Dsonar.host.url=$LOCALHOST_SONAR_IP -Dsonar.token=$SONAR_TOKEN -Dsonar.python.coverage.reportPaths=coverage/coverage.xml -Dsonar.dependencyCheck.htmlReportPath=dependency-check-report.html -Dsonar.dependencyCheck.xmlReportPath=dependency-check-report.xml -Dsonar.dependencyCheck.jsonReportPath=dependency-check-report.json
                                                                   
trivy_security_scan:
  stage: scan_sast
  image: docker:stable
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - apk add --no-cache curl
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin latest
  script:
    - docker build -t ex-build-dev:latest .
    - trivy image --output resultado_trivy.txt --severity HIGH,CRITICAL ex-build-dev:latest 
    - trivy image --format json ex-build-dev:latest > resultado.json
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - /root/.cache/trivy
  artifacts:
    paths:
      - resultado_trivy.txt
      - resultado.json


dast_gitlab_scan:
  stage: scan_dast
  image: 
    name: docker:stable
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
    DAST_TIMEOUT: "10m"
  services:
    - docker:dind
  before_script:
    - echo "Deploying to scan_test"
    - docker network create dast_net  
    - docker build -t $IMAGE_NAME .
    - docker run --name todo_list_app --network dast_net -d -p 5000:5000 $IMAGE_NAME  
  script:
    - docker run -e DAST_WEBSITE=$APP_IP --network dast_net registry.gitlab.com/gitlab-org/security-products/dast:2.0.0 /analyze 

zap_security_scan:
  stage: scan_dast
  image: 
    name: docker:stable
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  before_script:
    - echo "Deploying to scan_test"
    - docker network create zap_net  
    - docker build -t $IMAGE_NAME .
    - docker run --name todo_list_app --network zap_net -d -p 5000:5000 $IMAGE_NAME  
  script:
    - docker run --network zap_net -v $(pwd):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t $APP_IP -r testreport.html  
  allow_failure: true
  artifacts:
    paths:
      - testreport.html

deploy_job:
   stage: deploy
   image: docker:latest
   variables:
      DOCKER_HOST: tcp://docker:2375
      DOCKER_TLS_CERTDIR: ""
   services:
      - docker:dind
   before_script:        
        - echo "Remove anterior"
        - PORT_CONTAINERS=$(docker ps --filter "publish=5000" -q)
        - echo $PORT_CONTAINERS
        - if [ -n "$PORT_CONTAINERS" ]; then
            docker stop $PORT_CONTAINERS;
            docker rm $PORT_CONTAINERS;
            sleep 5; 
          fi
   script:
     - docker build -t ex-build-dev:latest .
     - echo "Deploying the app"
     - docker compose up -d